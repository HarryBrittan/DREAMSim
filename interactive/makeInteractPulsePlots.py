import sys
from collections import OrderedDict
import ROOT
import os
import matplotlib.pyplot as plt
sys.path.append("../../DREAMSim/plotter/CMSPLOTS")
from myFunction import DrawHistos  # noqa

ROOT.gROOT.SetBatch(True)

# Get command-line arguments
if len(sys.argv) != 4:
    print("Usage: python makePulsePlots.py <event_number> <xbin> <ybin>")
    sys.exit(1)

event_number = int(sys.argv[1])
xbin = int(sys.argv[2])
ybin = int(sys.argv[3])

# Open the ROOT file generated by makePulse.py
input_file = ROOT.TFile.Open("output.root")  # Replace with your actual ROOT file path
if not input_file:
    print("Error: Could not open ROOT file.")
    sys.exit(1)

# Define spatial binning
n_xbins, n_ybins = 33, 25  # Number of bins in x and y directions
nevts = 10  # Number of events

# Arguments for plotting
args = {
    'dology': False,
    'donormalize': False,
    'mycolors': [1],
    "MCOnly": True,
    'addOverflow': True,
    'addUnderflow': True,
    'mycolors': [2, 3, 4, 6]
}

# Get the histograms for the specified event and bin
hname_truth = f"h_truth_evt_{event_number}_bin_{xbin}_{ybin}"
hname_reco = f"h_reco_evt_{event_number}_bin_{xbin}_{ybin}"

hist_truth = input_file.Get(hname_truth)
hist_reco = input_file.Get(hname_reco)

# Plot the truth histogram if it exists
if hist_truth:
    DrawHistos(
        [hist_truth],
        [f"Truth Bin ({xbin}, {ybin})"],
        0, 15, "Measured Time [ns]",
        0, 10, "Voltage [mV]",
        f"Truth_Event_{event_number}_Bin_{xbin}_{ybin}",
        **args
    )

# Plot the reconstructed histogram if it exists
if hist_reco:
    args['dology'] = True  # Enable logarithmic scale for reconstructed plots
    DrawHistos(
        [hist_reco],
        [f"Reco Bin ({xbin}, {ybin})"],
        0, 30, "Measured Time [ns]",
        1, 3e10, "Voltage [mV]",
        f"Reco_Event_{event_number}_Bin_{xbin}_{ybin}",
        **args
    )

# Close the input file
input_file.Close()
